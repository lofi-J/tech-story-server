{"version":3,"sources":["../../src/tags/tag.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { TagsOrderBy } from './enums/order-by.enum';\n\n@Injectable()\nexport class TagsService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getAllTags(orderBy: TagsOrderBy) {\n    if (orderBy === TagsOrderBy.POPULAR) {\n      // 인기순 정렬 (사용 횟수 기준)\n      const tagsWithCount = await this.prisma.tags.findMany({\n        include: {\n          _count: {\n            select: {\n              post_tags: true,\n            },\n          },\n        },\n        orderBy: {\n          post_tags: {\n            _count: 'desc',\n          },\n        },\n      });\n\n      return tagsWithCount.map((tag) => ({\n        id: tag.id,\n        tag_name: tag.tag_name,\n        created_at: tag.created_at,\n        usage_count: tag._count.post_tags,\n      }));\n    } else {\n      // 기존 정렬 방식\n      const tags = await this.prisma.tags.findMany({\n        orderBy: { [orderBy]: 'desc' },\n      });\n\n      return tags.map((tag) => ({\n        id: tag.id,\n        tag_name: tag.tag_name,\n        created_at: tag.created_at,\n        usage_count: undefined,\n      }));\n    }\n  }\n\n  async getPopularTags(limit: number = 10) {\n    return await this.prisma.tags.findMany({\n      include: {\n        _count: {\n          select: {\n            post_tags: true, // 태그가 연결된 포스트 수\n          },\n        },\n      },\n      orderBy: {\n        post_tags: {\n          _count: 'desc', // 연결된 포스트 수로 내림차순 정렬\n        },\n      },\n      take: limit,\n    });\n  }\n\n  async getTagUsageStats() {\n    return await this.prisma.tags.findMany({\n      select: {\n        id: true,\n        tag_name: true,\n        created_at: true,\n        _count: {\n          select: {\n            post_tags: true, // 각 태그가 연결된 포스트 수\n          },\n        },\n      },\n      orderBy: {\n        post_tags: {\n          _count: 'desc',\n        },\n      },\n    });\n  }\n}\n"],"names":["TagsService","getAllTags","orderBy","TagsOrderBy","POPULAR","tagsWithCount","prisma","tags","findMany","include","_count","select","post_tags","map","tag","id","tag_name","created_at","usage_count","undefined","getPopularTags","limit","take","getTagUsageStats"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALc;+BACG;6BACF;;;;;;;;;;AAGrB,IAAA,AAAMA,cAAN,MAAMA;IAGX,MAAMC,WAAWC,OAAoB,EAAE;QACrC,IAAIA,YAAYC,wBAAW,CAACC,OAAO,EAAE;YACnC,oBAAoB;YACpB,MAAMC,gBAAgB,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;gBACpDC,SAAS;oBACPC,QAAQ;wBACNC,QAAQ;4BACNC,WAAW;wBACb;oBACF;gBACF;gBACAV,SAAS;oBACPU,WAAW;wBACTF,QAAQ;oBACV;gBACF;YACF;YAEA,OAAOL,cAAcQ,GAAG,CAAC,CAACC,MAAS,CAAA;oBACjCC,IAAID,IAAIC,EAAE;oBACVC,UAAUF,IAAIE,QAAQ;oBACtBC,YAAYH,IAAIG,UAAU;oBAC1BC,aAAaJ,IAAIJ,MAAM,CAACE,SAAS;gBACnC,CAAA;QACF,OAAO;YACL,WAAW;YACX,MAAML,OAAO,MAAM,IAAI,CAACD,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;gBAC3CN,SAAS;oBAAE,CAACA,QAAQ,EAAE;gBAAO;YAC/B;YAEA,OAAOK,KAAKM,GAAG,CAAC,CAACC,MAAS,CAAA;oBACxBC,IAAID,IAAIC,EAAE;oBACVC,UAAUF,IAAIE,QAAQ;oBACtBC,YAAYH,IAAIG,UAAU;oBAC1BC,aAAaC;gBACf,CAAA;QACF;IACF;IAEA,MAAMC,eAAeC,QAAgB,EAAE,EAAE;QACvC,OAAO,MAAM,IAAI,CAACf,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,SAAS;gBACPC,QAAQ;oBACNC,QAAQ;wBACNC,WAAW;oBACb;gBACF;YACF;YACAV,SAAS;gBACPU,WAAW;oBACTF,QAAQ;gBACV;YACF;YACAY,MAAMD;QACR;IACF;IAEA,MAAME,mBAAmB;QACvB,OAAO,MAAM,IAAI,CAACjB,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCG,QAAQ;gBACNI,IAAI;gBACJC,UAAU;gBACVC,YAAY;gBACZP,QAAQ;oBACNC,QAAQ;wBACNC,WAAW;oBACb;gBACF;YACF;YACAV,SAAS;gBACPU,WAAW;oBACTF,QAAQ;gBACV;YACF;QACF;IACF;IA7EA,YAAY,AAAiBJ,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AA8EvD"}