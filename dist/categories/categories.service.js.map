{"version":3,"sources":["../../src/categories/categories.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CategoriesOrderBy } from './enums/categories-order-by.enum';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getAllCategories(orderBy: CategoriesOrderBy) {\n    if (orderBy === CategoriesOrderBy.POPULAR) {\n      // 인기순 정렬 (사용 횟수 기준)\n      const categoriesWithCount = await this.prisma.categories.findMany({\n        include: {\n          _count: {\n            select: {\n              posts: true,\n            },\n          },\n        },\n        orderBy: {\n          posts: {\n            _count: 'desc',\n          },\n        },\n      });\n\n      return categoriesWithCount.map((category) => ({\n        id: category.id,\n        category_name: category.category_name,\n        created_at: category.created_at,\n        usage_count: category._count.posts,\n      }));\n    } else {\n      // 기존 정렬 방식\n      const categories = await this.prisma.categories.findMany({\n        orderBy: { [orderBy]: 'desc' },\n      });\n\n      return categories.map((category) => ({\n        id: category.id,\n        category_name: category.category_name,\n        created_at: category.created_at,\n        usage_count: undefined,\n      }));\n    }\n  }\n\n  async getPopularCategories(limit: number = 10) {\n    return await this.prisma.categories.findMany({\n      include: {\n        _count: {\n          select: {\n            posts: true, // 카테고리가 연결된 포스트 수\n          },\n        },\n      },\n      orderBy: {\n        posts: {\n          _count: 'desc', // 연결된 포스트 수로 내림차순 정렬\n        },\n      },\n      take: limit,\n    });\n  }\n\n  async getCategoryUsageStats() {\n    return await this.prisma.categories.findMany({\n      select: {\n        id: true,\n        category_name: true,\n        created_at: true,\n        _count: {\n          select: {\n            posts: true, // 각 카테고리가 연결된 포스트 수\n          },\n        },\n      },\n      orderBy: {\n        posts: {\n          _count: 'desc',\n        },\n      },\n    });\n  }\n}\n"],"names":["CategoriesService","getAllCategories","orderBy","CategoriesOrderBy","POPULAR","categoriesWithCount","prisma","categories","findMany","include","_count","select","posts","map","category","id","category_name","created_at","usage_count","undefined","getPopularCategories","limit","take","getCategoryUsageStats"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALc;+BACG;uCACI;;;;;;;;;;AAG3B,IAAA,AAAMA,oBAAN,MAAMA;IAGX,MAAMC,iBAAiBC,OAA0B,EAAE;QACjD,IAAIA,YAAYC,wCAAiB,CAACC,OAAO,EAAE;YACzC,oBAAoB;YACpB,MAAMC,sBAAsB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;gBAChEC,SAAS;oBACPC,QAAQ;wBACNC,QAAQ;4BACNC,OAAO;wBACT;oBACF;gBACF;gBACAV,SAAS;oBACPU,OAAO;wBACLF,QAAQ;oBACV;gBACF;YACF;YAEA,OAAOL,oBAAoBQ,GAAG,CAAC,CAACC,WAAc,CAAA;oBAC5CC,IAAID,SAASC,EAAE;oBACfC,eAAeF,SAASE,aAAa;oBACrCC,YAAYH,SAASG,UAAU;oBAC/BC,aAAaJ,SAASJ,MAAM,CAACE,KAAK;gBACpC,CAAA;QACF,OAAO;YACL,WAAW;YACX,MAAML,aAAa,MAAM,IAAI,CAACD,MAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;gBACvDN,SAAS;oBAAE,CAACA,QAAQ,EAAE;gBAAO;YAC/B;YAEA,OAAOK,WAAWM,GAAG,CAAC,CAACC,WAAc,CAAA;oBACnCC,IAAID,SAASC,EAAE;oBACfC,eAAeF,SAASE,aAAa;oBACrCC,YAAYH,SAASG,UAAU;oBAC/BC,aAAaC;gBACf,CAAA;QACF;IACF;IAEA,MAAMC,qBAAqBC,QAAgB,EAAE,EAAE;QAC7C,OAAO,MAAM,IAAI,CAACf,MAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;YAC3CC,SAAS;gBACPC,QAAQ;oBACNC,QAAQ;wBACNC,OAAO;oBACT;gBACF;YACF;YACAV,SAAS;gBACPU,OAAO;oBACLF,QAAQ;gBACV;YACF;YACAY,MAAMD;QACR;IACF;IAEA,MAAME,wBAAwB;QAC5B,OAAO,MAAM,IAAI,CAACjB,MAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;YAC3CG,QAAQ;gBACNI,IAAI;gBACJC,eAAe;gBACfC,YAAY;gBACZP,QAAQ;oBACNC,QAAQ;wBACNC,OAAO;oBACT;gBACF;YACF;YACAV,SAAS;gBACPU,OAAO;oBACLF,QAAQ;gBACV;YACF;QACF;IACF;IA7EA,YAAY,AAAiBJ,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AA8EvD"}