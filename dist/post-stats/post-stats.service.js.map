{"version":3,"sources":["../../src/post-stats/post-stats.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport type { Request } from 'express';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { PostUtils } from '../util/post.utils';\n\n@Injectable()\nexport class PostStatsService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly postUtils: PostUtils,\n  ) {}\n\n  async increasePostViews(slug: string, req: Request) {\n    // slug를 통해 post id 조회\n    const postId = await this.postUtils.getPostIdBySlug(slug);\n\n    if (!postId) {\n      throw new Error(`Post with slug '${slug}' not found`);\n    }\n\n    // 세션에서 이미 조회한 포스트인지 확인\n    const viewedPosts = req.session.viewedPosts || [];\n    const sessionKey = `post_${postId}`;\n\n    if (viewedPosts.includes(sessionKey)) {\n      // 이미 조회한 포스트인 경우 기존 통계만 반환\n      const existingStats = await this.prisma.post_stats.findFirst({\n        where: { post_id: postId },\n      });\n\n      if (existingStats) {\n        return existingStats;\n      } else {\n        // 통계가 없는 경우 기본값으로 생성\n        return await this.prisma.post_stats.create({\n          data: { post_id: postId, views: 0, likes: 0 },\n        });\n      }\n    }\n\n    // 세션에 조회 기록 추가\n    viewedPosts.push(sessionKey);\n    req.session.viewedPosts = viewedPosts;\n\n    // 기존 post_stats 레코드 찾기\n    const isExisting = await this.prisma.post_stats.findFirst({\n      where: { post_id: postId },\n    });\n\n    if (isExisting) {\n      // 기존 레코드가 있으면 조회수 증가\n      return await this.prisma.post_stats.update({\n        where: { id: isExisting.id },\n        data: { views: { increment: 1 } },\n      });\n    } else {\n      // 기존 레코드가 없으면 새로 생성\n      return await this.prisma.post_stats.create({\n        data: { post_id: postId, views: 1 },\n      });\n    }\n  }\n\n  async increasePostLikes(slug: string, req: Request) {\n    // slug를 통해 post id 조회\n    const postId = await this.postUtils.getPostIdBySlug(slug);\n\n    if (!postId) {\n      throw new Error(`Post with slug '${slug}' not found`);\n    }\n\n    // 세션에서 이미 좋아요를 누른 포스트인지 확인\n    const likedPosts = req.session.likedPosts || [];\n    const sessionKey = `post_${postId}`;\n\n    if (likedPosts.includes(sessionKey)) {\n      // 이미 좋아요를 누른 포스트인 경우 기존 통계만 반환\n      const existingStats = await this.prisma.post_stats.findFirst({\n        where: { post_id: postId },\n      });\n\n      if (existingStats) {\n        return existingStats;\n      } else {\n        // 통계가 없는 경우 기본값으로 생성\n        return await this.prisma.post_stats.create({\n          data: { post_id: postId, views: 0, likes: 0 },\n        });\n      }\n    }\n\n    // 세션에 좋아요 기록 추가\n    likedPosts.push(sessionKey);\n    req.session.likedPosts = likedPosts;\n\n    // 기존 post_stats 레코드 찾기\n    const isExisting = await this.prisma.post_stats.findFirst({\n      where: { post_id: postId },\n    });\n\n    if (isExisting) {\n      // 기존 레코드가 있으면 좋아요 증가\n      return await this.prisma.post_stats.update({\n        where: { id: isExisting.id },\n        data: { likes: { increment: 1 } },\n      });\n    } else {\n      // 기존 레코드가 없으면 새로 생성\n      return await this.prisma.post_stats.create({\n        data: { post_id: postId, likes: 1 },\n      });\n    }\n  }\n}\n"],"names":["PostStatsService","increasePostViews","slug","req","postId","postUtils","getPostIdBySlug","Error","viewedPosts","session","sessionKey","includes","existingStats","prisma","post_stats","findFirst","where","post_id","create","data","views","likes","push","isExisting","update","id","increment","increasePostLikes","likedPosts"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANc;+BAEG;2BACJ;;;;;;;;;;AAGnB,IAAA,AAAMA,mBAAN,MAAMA;IAMX,MAAMC,kBAAkBC,IAAY,EAAEC,GAAY,EAAE;QAClD,sBAAsB;QACtB,MAAMC,SAAS,MAAM,IAAI,CAACC,SAAS,CAACC,eAAe,CAACJ;QAEpD,IAAI,CAACE,QAAQ;YACX,MAAM,IAAIG,MAAM,CAAC,gBAAgB,EAAEL,KAAK,WAAW,CAAC;QACtD;QAEA,uBAAuB;QACvB,MAAMM,cAAcL,IAAIM,OAAO,CAACD,WAAW,IAAI,EAAE;QACjD,MAAME,aAAa,CAAC,KAAK,EAAEN,QAAQ;QAEnC,IAAII,YAAYG,QAAQ,CAACD,aAAa;YACpC,2BAA2B;YAC3B,MAAME,gBAAgB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;gBAC3DC,OAAO;oBAAEC,SAASb;gBAAO;YAC3B;YAEA,IAAIQ,eAAe;gBACjB,OAAOA;YACT,OAAO;gBACL,qBAAqB;gBACrB,OAAO,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACI,MAAM,CAAC;oBACzCC,MAAM;wBAAEF,SAASb;wBAAQgB,OAAO;wBAAGC,OAAO;oBAAE;gBAC9C;YACF;QACF;QAEA,eAAe;QACfb,YAAYc,IAAI,CAACZ;QACjBP,IAAIM,OAAO,CAACD,WAAW,GAAGA;QAE1B,uBAAuB;QACvB,MAAMe,aAAa,MAAM,IAAI,CAACV,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;YACxDC,OAAO;gBAAEC,SAASb;YAAO;QAC3B;QAEA,IAAImB,YAAY;YACd,qBAAqB;YACrB,OAAO,MAAM,IAAI,CAACV,MAAM,CAACC,UAAU,CAACU,MAAM,CAAC;gBACzCR,OAAO;oBAAES,IAAIF,WAAWE,EAAE;gBAAC;gBAC3BN,MAAM;oBAAEC,OAAO;wBAAEM,WAAW;oBAAE;gBAAE;YAClC;QACF,OAAO;YACL,oBAAoB;YACpB,OAAO,MAAM,IAAI,CAACb,MAAM,CAACC,UAAU,CAACI,MAAM,CAAC;gBACzCC,MAAM;oBAAEF,SAASb;oBAAQgB,OAAO;gBAAE;YACpC;QACF;IACF;IAEA,MAAMO,kBAAkBzB,IAAY,EAAEC,GAAY,EAAE;QAClD,sBAAsB;QACtB,MAAMC,SAAS,MAAM,IAAI,CAACC,SAAS,CAACC,eAAe,CAACJ;QAEpD,IAAI,CAACE,QAAQ;YACX,MAAM,IAAIG,MAAM,CAAC,gBAAgB,EAAEL,KAAK,WAAW,CAAC;QACtD;QAEA,2BAA2B;QAC3B,MAAM0B,aAAazB,IAAIM,OAAO,CAACmB,UAAU,IAAI,EAAE;QAC/C,MAAMlB,aAAa,CAAC,KAAK,EAAEN,QAAQ;QAEnC,IAAIwB,WAAWjB,QAAQ,CAACD,aAAa;YACnC,+BAA+B;YAC/B,MAAME,gBAAgB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;gBAC3DC,OAAO;oBAAEC,SAASb;gBAAO;YAC3B;YAEA,IAAIQ,eAAe;gBACjB,OAAOA;YACT,OAAO;gBACL,qBAAqB;gBACrB,OAAO,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACI,MAAM,CAAC;oBACzCC,MAAM;wBAAEF,SAASb;wBAAQgB,OAAO;wBAAGC,OAAO;oBAAE;gBAC9C;YACF;QACF;QAEA,gBAAgB;QAChBO,WAAWN,IAAI,CAACZ;QAChBP,IAAIM,OAAO,CAACmB,UAAU,GAAGA;QAEzB,uBAAuB;QACvB,MAAML,aAAa,MAAM,IAAI,CAACV,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;YACxDC,OAAO;gBAAEC,SAASb;YAAO;QAC3B;QAEA,IAAImB,YAAY;YACd,qBAAqB;YACrB,OAAO,MAAM,IAAI,CAACV,MAAM,CAACC,UAAU,CAACU,MAAM,CAAC;gBACzCR,OAAO;oBAAES,IAAIF,WAAWE,EAAE;gBAAC;gBAC3BN,MAAM;oBAAEE,OAAO;wBAAEK,WAAW;oBAAE;gBAAE;YAClC;QACF,OAAO;YACL,oBAAoB;YACpB,OAAO,MAAM,IAAI,CAACb,MAAM,CAACC,UAAU,CAACI,MAAM,CAAC;gBACzCC,MAAM;oBAAEF,SAASb;oBAAQiB,OAAO;gBAAE;YACpC;QACF;IACF;IAzGA,YACE,AAAiBR,MAAqB,EACtC,AAAiBR,SAAoB,CACrC;aAFiBQ,SAAAA;aACAR,YAAAA;IAChB;AAuGL"}