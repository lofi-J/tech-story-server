{"version":3,"sources":["../../src/posts/posts.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  GetPostsByCategoryInput,\n  GetPostsByTagInput,\n  GetPostsInput,\n} from './dto/posts.dto';\nimport { PostsOrderBy, SortOrder } from './enums/posts-order-by.enum';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getAllPosts(input: GetPostsInput) {\n    const { limit, offset, orderBy, order, search } = input;\n\n    // 검색 조건 설정\n    const whereCondition: Prisma.postsWhereInput = search\n      ? {\n          OR: [\n            { title: { contains: search, mode: 'insensitive' } },\n            { slug: { contains: search, mode: 'insensitive' } },\n          ],\n        }\n      : {};\n\n    // 포스트 조회 (인기도 정렬 지원)\n    const posts = await this.getPostsWithPopularitySort(\n      whereCondition,\n      orderBy,\n      order,\n      limit,\n      offset,\n    );\n\n    // 전체 개수 조회\n    const totalCount = await this.prisma.posts.count({\n      where: whereCondition,\n    });\n\n    return {\n      posts: posts.map((post) => ({\n        id: post.id,\n        slug: post.slug,\n        title: post.title,\n        description: post.description || '',\n        thumbnail: post.thumbnail || null,\n        published: post.published || undefined,\n        updated_at: post.updated_at || undefined,\n        hash_code: post.hash_code,\n        tags: post.post_tags.map((pt) => ({\n          id: pt.tags.id,\n          tag_name: pt.tags.tag_name,\n          created_at: pt.tags.created_at || new Date(),\n          usage_count: undefined, // 필요시 계산 로직 추가\n        })),\n        category: post.categories?.category_name || '',\n        stats: post.post_stats[0]\n          ? {\n              id: post.post_stats[0].id,\n              post_id: post.post_stats[0].post_id || undefined,\n              views: post.post_stats[0].views || 0,\n              likes: post.post_stats[0].likes || 0,\n              updated_at: post.post_stats[0].updated_at || undefined,\n            }\n          : {\n              views: 0,\n              likes: 0,\n            },\n      })),\n      totalCount,\n      hasMore: offset + limit < totalCount,\n    };\n  }\n\n  private getOrderByCondition(\n    orderBy: PostsOrderBy,\n    order: SortOrder,\n  ): Prisma.postsOrderByWithRelationInput {\n    const sortDirection =\n      order === SortOrder.ASC ? Prisma.SortOrder.asc : Prisma.SortOrder.desc;\n\n    switch (orderBy) {\n      case PostsOrderBy.LATEST:\n        return { published: sortDirection };\n\n      case PostsOrderBy.UPDATED:\n        return { updated_at: sortDirection };\n\n      case PostsOrderBy.POPULAR_VIEWS:\n        // 조회수 기준 정렬: 기본적으로 ID 정렬하고, 메서드에서 별도 처리\n        return { id: sortDirection };\n\n      case PostsOrderBy.POPULAR_LIKES:\n        // 좋아요 기준 정렬: 기본적으로 ID 정렬하고, 메서드에서 별도 처리\n        return { id: sortDirection };\n\n      case PostsOrderBy.TITLE:\n        return { title: sortDirection };\n\n      case PostsOrderBy.ID:\n        return { id: sortDirection };\n\n      default:\n        return { published: Prisma.SortOrder.desc };\n    }\n  }\n\n  /**\n   * 인기도 기준 정렬을 위한 추가 처리\n   * POPULAR_VIEWS와 POPULAR_LIKES의 경우 post_stats 테이블의 값으로 정렬\n   */\n  private async getPostsWithPopularitySort(\n    whereCondition: Prisma.postsWhereInput,\n    orderBy: PostsOrderBy,\n    order: SortOrder,\n    limit: number,\n    offset: number,\n  ) {\n    if (\n      orderBy === PostsOrderBy.POPULAR_VIEWS ||\n      orderBy === PostsOrderBy.POPULAR_LIKES\n    ) {\n      // 인기도 정렬을 위한 Raw Query 사용\n      const sortField =\n        orderBy === PostsOrderBy.POPULAR_VIEWS ? 'views' : 'likes';\n      const sortDirection = order === SortOrder.ASC ? 'ASC' : 'DESC';\n\n      // Raw SQL로 정렬된 포스트 ID 조회\n      const sortedPostIds = await this.prisma.$queryRaw<{ id: number }[]>`\n        SELECT p.id\n        FROM posts p\n        LEFT JOIN post_stats ps ON p.id = ps.post_id\n        ORDER BY COALESCE(ps.${Prisma.raw(sortField)}, 0) ${Prisma.raw(sortDirection)}, p.id ${Prisma.raw(sortDirection)}\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n\n      const postIds = sortedPostIds.map((p) => p.id);\n\n      if (postIds.length === 0) {\n        return [];\n      }\n\n      // 정렬된 ID 순서대로 포스트 조회\n      const posts = await this.prisma.posts.findMany({\n        where: {\n          AND: [whereCondition, { id: { in: postIds } }],\n        },\n        include: {\n          categories: true,\n          post_tags: {\n            include: {\n              tags: true,\n            },\n            orderBy: {\n              tag_id: 'asc',\n            },\n          },\n          post_stats: true,\n        },\n      });\n\n      return postIds\n        .map((id) => posts.find((post) => post.id === id))\n        .filter((post): post is NonNullable<typeof post> => Boolean(post));\n    }\n\n    // 일반 정렬의 경우 기존 방식 사용\n    return await this.prisma.posts.findMany({\n      where: whereCondition,\n      take: limit,\n      skip: offset,\n      orderBy: this.getOrderByCondition(orderBy, order),\n      include: {\n        categories: true,\n        post_tags: {\n          include: {\n            tags: true,\n          },\n          orderBy: {\n            tag_id: 'asc',\n          },\n        },\n        post_stats: true,\n      },\n    });\n  }\n\n  async getPostBySlug(slug: string) {\n    const post = await this.prisma.posts.findUnique({\n      where: { slug },\n      include: {\n        categories: true,\n        post_tags: {\n          include: {\n            tags: true,\n          },\n        },\n        post_stats: true,\n      },\n    });\n\n    if (!post) {\n      return null;\n    }\n\n    return {\n      id: post.id,\n      slug: post.slug,\n      title: post.title,\n      description: post.description || '',\n      thumbnail: post.thumbnail || null,\n      published: post.published || undefined,\n      updated_at: post.updated_at || undefined,\n      hash_code: post.hash_code,\n      category: post.categories?.category_name || '',\n      tags:\n        post.post_tags?.map((pt) => ({\n          id: pt.tags.id,\n          tag_name: pt.tags.tag_name,\n          created_at: pt.tags.created_at || new Date(),\n          usage_count: undefined, // 필요시 계산 로직 추가\n        })) || [],\n      stats: post.post_stats?.[0]\n        ? {\n            id: post.post_stats[0].id,\n            post_id: post.post_stats[0].post_id || undefined,\n            views: post.post_stats[0].views || 0,\n            likes: post.post_stats[0].likes || 0,\n            updated_at: post.post_stats[0].updated_at || undefined,\n          }\n        : {\n            views: 0,\n            likes: 0,\n          },\n    };\n  }\n\n  async getPostsByTag(input: GetPostsByTagInput) {\n    const { tagName, limit, offset, orderBy, order } = input;\n\n    // 검색 조건 설정\n    const whereCondition: Prisma.postsWhereInput = {\n      post_tags: {\n        some: {\n          tags: {\n            tag_name: tagName,\n          },\n        },\n      },\n    };\n\n    // 특정 태그를 가진 포스트들을 조회 (인기도 정렬 지원)\n    const posts = await this.getPostsWithPopularitySort(\n      whereCondition,\n      orderBy,\n      order,\n      limit,\n      offset,\n    );\n\n    // 전체 개수 조회\n    const totalCount = await this.prisma.posts.count({\n      where: whereCondition,\n    });\n\n    return {\n      posts: posts.map((post) => ({\n        id: post.id,\n        slug: post.slug,\n        title: post.title,\n        description: post.description || '',\n        thumbnail: post.thumbnail,\n        published: post.published ?? undefined,\n        updated_at: post.updated_at ?? undefined,\n        hash_code: post.hash_code,\n        tags: post.post_tags.map((pt) => ({\n          id: pt.tags.id,\n          tag_name: pt.tags.tag_name,\n          created_at: pt.tags.created_at || new Date(),\n          usage_count: undefined, // 필요시 계산 로직 추가\n        })),\n        category: post.categories?.category_name || '',\n        stats: post.post_stats[0]\n          ? {\n              id: post.post_stats[0].id,\n              post_id: post.post_stats[0].post_id ?? undefined,\n              views: post.post_stats[0].views || 0,\n              likes: post.post_stats[0].likes || 0,\n              updated_at: post.post_stats[0].updated_at ?? undefined,\n            }\n          : {\n              views: 0,\n              likes: 0,\n            },\n      })),\n      totalCount,\n      hasMore: offset + limit < totalCount,\n    };\n  }\n\n  async getPostsByCategory(input: GetPostsByCategoryInput) {\n    const { categoryName, limit, offset, orderBy, order } = input;\n\n    // 검색 조건 설정: categories 테이블에서 category_name이 일치하는 posts 조회\n    const whereCondition: Prisma.postsWhereInput = {\n      categories: {\n        category_name: categoryName,\n      },\n    };\n\n    // 카테고리별 포스트들을 조회 (인기도 정렬 지원)\n    const categoryPosts = await this.getPostsWithPopularitySort(\n      whereCondition,\n      orderBy,\n      order,\n      limit,\n      offset,\n    );\n\n    // 전체 개수 조회 (필터링된 결과 기준)\n    const totalCount = await this.prisma.posts.count({\n      where: whereCondition,\n    });\n\n    return {\n      posts: categoryPosts.map((post) => ({\n        id: post.id,\n        slug: post.slug,\n        title: post.title,\n        description: post.description || '',\n        thumbnail: post.thumbnail,\n        published: post.published || undefined,\n        updated_at: post.updated_at || undefined,\n        hash_code: post.hash_code,\n        category: post.categories?.category_name || '',\n        tags: post.post_tags.map((pt) => ({\n          id: pt.tags.id,\n          tag_name: pt.tags.tag_name,\n          created_at: pt.tags.created_at || new Date(),\n          usage_count: undefined, // 필요시 계산 로직 추가\n        })),\n        stats: post.post_stats[0]\n          ? {\n              id: post.post_stats[0].id,\n              post_id: post.post_stats[0].post_id || undefined,\n              views: post.post_stats[0].views || 0,\n              likes: post.post_stats[0].likes || 0,\n              updated_at: post.post_stats[0].updated_at || undefined,\n            }\n          : {\n              views: 0,\n              likes: 0,\n            },\n      })),\n      totalCount,\n      hasMore: offset + limit < totalCount,\n    };\n  }\n}\n"],"names":["PostsService","getAllPosts","input","limit","offset","orderBy","order","search","whereCondition","OR","title","contains","mode","slug","posts","getPostsWithPopularitySort","totalCount","prisma","count","where","map","post","id","description","thumbnail","published","undefined","updated_at","hash_code","tags","post_tags","pt","tag_name","created_at","Date","usage_count","category","categories","category_name","stats","post_stats","post_id","views","likes","hasMore","getOrderByCondition","sortDirection","SortOrder","ASC","Prisma","asc","desc","PostsOrderBy","LATEST","UPDATED","POPULAR_VIEWS","POPULAR_LIKES","TITLE","ID","sortField","sortedPostIds","$queryRaw","raw","postIds","p","length","findMany","AND","in","include","tag_id","find","filter","Boolean","take","skip","getPostBySlug","findUnique","getPostsByTag","tagName","some","getPostsByCategory","categoryName","categoryPosts"],"mappings":"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"}