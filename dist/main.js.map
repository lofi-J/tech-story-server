{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport session from 'express-session';\nimport { AppModule } from './app.module';\nimport { clientConfig } from './config/app-client-config';\nimport './types/session.types';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n    // Session configuration\n  const sessionSecret = process.env.SESSION_SECRET;\n  if (!sessionSecret) {\n    console.error('경고: SESSION_SECRET 환경변수가 설정되지 않았습니다!');\n    if (process.env.NODE_ENV === 'production') {\n      throw new Error('SESSION_SECRET 환경변수는 프로덕션에서 필수입니다!');\n    }\n  }\n  \n  // 프로덕션에서는 세션을 비활성화하거나 다른 저장소 사용\n  if (process.env.NODE_ENV !== 'production') {\n    app.use(\n      session({\n        secret: sessionSecret || 'dev-fallback-secret-change-in-production',\n        resave: false,\n        saveUninitialized: false,\n        name: 'jera_s',\n        cookie: {\n          secure: false, // 개발환경에서는 false\n          httpOnly: true,\n          maxAge: 6 * 60 * 60 * 1000, // 6 hours\n          sameSite: 'lax',\n        },\n      }),\n    );\n  } else {\n    console.log('프로덕션 환경: 세션 미들웨어 비활성화됨 (build-sync API는 API 키 인증 사용)');\n  }\n\n  // Global validation pipe\n  app.useGlobalPipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  );\n\n  // app configuration\n  app.enableCors({\n    origin:\n      process.env.NODE_ENV === 'production'\n        ? process.env.FRONTEND_URL || true // 프로덕션에서는 FRONTEND_URL 환경변수 사용, 없으면 모든 origin 허용\n        : [\n            `http://${clientConfig().host}:${clientConfig().port}`,\n            `https://${clientConfig().host}:${clientConfig().port}`,\n          ],\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n    allowedHeaders: [\n      'Content-Type',\n      'Authorization',\n      'Apollo-Require-Preflight',\n    ],\n    credentials: true,\n  });\n\n  await app.listen(process.env.DEFAULT_PORT ?? 3000);\n  console.log(`App is running on port ${process.env.DEFAULT_PORT ?? 3000}`);\n}\nvoid bootstrap();\n"],"names":["bootstrap","app","NestFactory","create","AppModule","sessionSecret","process","env","SESSION_SECRET","console","error","NODE_ENV","Error","use","session","secret","resave","saveUninitialized","name","cookie","secure","httpOnly","maxAge","sameSite","log","useGlobalPipes","ValidationPipe","transform","whitelist","forbidNonWhitelisted","enableCors","origin","FRONTEND_URL","clientConfig","host","port","methods","allowedHeaders","credentials","listen","DEFAULT_PORT"],"mappings":";;;;wBAA+B;sBACH;uEACR;2BACM;iCACG;QACtB;;;;;;AAEP,eAAeA;IACb,MAAMC,MAAM,MAAMC,iBAAW,CAACC,MAAM,CAACC,oBAAS;IAE5C,wBAAwB;IAC1B,MAAMC,gBAAgBC,QAAQC,GAAG,CAACC,cAAc;IAChD,IAAI,CAACH,eAAe;QAClBI,QAAQC,KAAK,CAAC;QACd,IAAIJ,QAAQC,GAAG,CAACI,QAAQ,KAAK,cAAc;YACzC,MAAM,IAAIC,MAAM;QAClB;IACF;IAEA,gCAAgC;IAChC,IAAIN,QAAQC,GAAG,CAACI,QAAQ,KAAK,cAAc;QACzCV,IAAIY,GAAG,CACLC,IAAAA,uBAAO,EAAC;YACNC,QAAQV,iBAAiB;YACzBW,QAAQ;YACRC,mBAAmB;YACnBC,MAAM;YACNC,QAAQ;gBACNC,QAAQ;gBACRC,UAAU;gBACVC,QAAQ,IAAI,KAAK,KAAK;gBACtBC,UAAU;YACZ;QACF;IAEJ,OAAO;QACLd,QAAQe,GAAG,CAAC;IACd;IAEA,yBAAyB;IACzBvB,IAAIwB,cAAc,CAChB,IAAIC,sBAAc,CAAC;QACjBC,WAAW;QACXC,WAAW;QACXC,sBAAsB;IACxB;IAGF,oBAAoB;IACpB5B,IAAI6B,UAAU,CAAC;QACbC,QACEzB,QAAQC,GAAG,CAACI,QAAQ,KAAK,eACrBL,QAAQC,GAAG,CAACyB,YAAY,IAAI,KAAK,iDAAiD;WAClF;YACE,CAAC,OAAO,EAAEC,IAAAA,6BAAY,IAAGC,IAAI,CAAC,CAAC,EAAED,IAAAA,6BAAY,IAAGE,IAAI,EAAE;YACtD,CAAC,QAAQ,EAAEF,IAAAA,6BAAY,IAAGC,IAAI,CAAC,CAAC,EAAED,IAAAA,6BAAY,IAAGE,IAAI,EAAE;SACxD;QACPC,SAAS;YAAC;YAAO;YAAQ;YAAO;YAAU;YAAS;SAAU;QAC7DC,gBAAgB;YACd;YACA;YACA;SACD;QACDC,aAAa;IACf;IAEA,MAAMrC,IAAIsC,MAAM,CAACjC,QAAQC,GAAG,CAACiC,YAAY,IAAI;IAC7C/B,QAAQe,GAAG,CAAC,CAAC,uBAAuB,EAAElB,QAAQC,GAAG,CAACiC,YAAY,IAAI,MAAM;AAC1E;AACA,KAAKxC"}