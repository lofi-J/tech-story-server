{"version":3,"sources":["../../../src/build-sync/categories/categories.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Post,\n} from '@nestjs/common';\nimport { handlePrismaError, isPrismaError } from 'src/util/prisma';\nimport { CategoriesService } from './categories.service';\nimport type { CreateCategoryDto } from './dto/category.dto';\n\n@Controller('api/build-sync/categories')\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  // API 키 검증 메서드\n  private validateApiKey(apiKey: string | undefined): void {\n    const validApiKey = process.env.BUILD_SYNC_API_KEY;\n\n    if (!validApiKey) {\n      console.warn(\n        'BUILD_SYNC_API_KEY 환경변수가 설정되지 않았습니다. 개발 환경에서는 무시됩니다.',\n      );\n      if (process.env.NODE_ENV === 'production') {\n        throw new HttpException(\n          'API 키가 설정되지 않았습니다',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n      return; // 개발 환경에서는 API 키 없이도 허용\n    }\n\n    if (!apiKey || apiKey !== validApiKey) {\n      throw new HttpException(\n        '유효하지 않은 API 키입니다',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n  }\n\n  @Get()\n  async getAllCategories() {\n    try {\n      const categories = await this.categoriesService.getAllCategories();\n      return {\n        ok: true,\n        status: 200,\n        data: categories,\n      };\n    } catch (error) {\n      if (isPrismaError(error)) {\n        const { message, status } = handlePrismaError(error);\n        throw new HttpException(message, status);\n      }\n      throw new HttpException(\n        '카테고리 조회 중 오류가 발생했습니다.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id')\n  async getCategory(@Param('id', ParseIntPipe) id: number) {\n    try {\n      const category = await this.categoriesService.getCategory(id);\n      if (!category) {\n        throw new HttpException(\n          '카테고리를 찾을 수 없습니다.',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: category,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      if (isPrismaError(error)) {\n        const { message, status } = handlePrismaError(error);\n        throw new HttpException(message, status);\n      }\n      throw new HttpException(\n        '카테고리 조회 중 오류가 발생했습니다.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('name/:categoryName')\n  async getCategoryByName(@Param('categoryName') categoryName: string) {\n    try {\n      const category =\n        await this.categoriesService.getCategoryByName(categoryName);\n      if (!category) {\n        throw new HttpException(\n          '카테고리를 찾을 수 없습니다.',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: category,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      if (isPrismaError(error)) {\n        const { message, status } = handlePrismaError(error);\n        throw new HttpException(message, status);\n      }\n      throw new HttpException(\n        '카테고리 조회 중 오류가 발생했습니다.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post()\n  async createCategory(\n    @Headers('x-api-key') apiKey: string,\n    @Body() createCategoryDto: CreateCategoryDto,\n  ) {\n    this.validateApiKey(apiKey);\n    try {\n      const category =\n        await this.categoriesService.createCategory(createCategoryDto);\n      return {\n        ok: true,\n        status: 201,\n        data: category,\n        message: '카테고리가 성공적으로 생성되었습니다.',\n      };\n    } catch (error) {\n      if (isPrismaError(error)) {\n        const { message, status } = handlePrismaError(error);\n        throw new HttpException(message, status);\n      }\n      throw new HttpException(\n        '카테고리 생성 중 오류가 발생했습니다.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async deleteCategory(\n    @Headers('x-api-key') apiKey: string,\n    @Param('id', ParseIntPipe) id: number,\n  ) {\n    this.validateApiKey(apiKey);\n    try {\n      await this.categoriesService.deleteCategory(id);\n      return {\n        ok: true,\n        status: 200,\n        message: '카테고리가 성공적으로 삭제되었습니다.',\n      };\n    } catch (error) {\n      if (isPrismaError(error)) {\n        const { message, status } = handlePrismaError(error);\n        throw new HttpException(message, status);\n      }\n      throw new HttpException(\n        '카테고리 삭제 중 오류가 발생했습니다.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n"],"names":["CategoriesController","validateApiKey","apiKey","validApiKey","process","env","BUILD_SYNC_API_KEY","console","warn","NODE_ENV","HttpException","HttpStatus","INTERNAL_SERVER_ERROR","UNAUTHORIZED","getAllCategories","categories","categoriesService","ok","status","data","error","isPrismaError","message","handlePrismaError","getCategory","id","category","NOT_FOUND","getCategoryByName","categoryName","createCategory","createCategoryDto","deleteCategory"],"mappings":"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"}