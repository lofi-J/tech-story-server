{"version":3,"sources":["../../../src/build-sync/posts/posts.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { handlePrismaError, isPrismaError } from 'src/util/prisma';\nimport type { CreatePostDto, UpdatePostDto } from './dto/post.dto';\nimport { PostsService } from './posts.service';\n\n@Controller('api/build-sync/posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  // API 키 검증 메서드\n  private validateApiKey(apiKey: string | undefined): void {\n    const validApiKey = process.env.BUILD_SYNC_API_KEY;\n\n    if (!validApiKey) {\n      console.warn(\n        'BUILD_SYNC_API_KEY 환경변수가 설정되지 않았습니다. 개발 환경에서는 무시됩니다.',\n      );\n      if (process.env.NODE_ENV === 'production') {\n        throw new HttpException(\n          'API 키가 설정되지 않았습니다',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n      return; // 개발 환경에서는 API 키 없이도 허용\n    }\n\n    if (!apiKey || apiKey !== validApiKey) {\n      throw new HttpException(\n        '유효하지 않은 API 키입니다',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n  }\n\n  @Post()\n  async upsertPost(\n    @Headers('x-api-key') apiKey: string,\n    @Body() createPostDto: CreatePostDto,\n  ) {\n    this.validateApiKey(apiKey);\n\n    try {\n      console.log('받은 데이터:', createPostDto);\n\n      const post = await this.postsService.upsertPost(createPostDto);\n\n      return {\n        ok: true,\n        status: 201,\n        data: post,\n      };\n    } catch (error) {\n      console.error('Upsert 에러 상세:', error);\n      if (isPrismaError(error)) return handlePrismaError(error);\n      throw new HttpException('포스트 처리 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put('bulk')\n  async bulkUpsertPosts(\n    @Headers('x-api-key') apiKey: string,\n    @Body() posts: CreatePostDto[],\n  ) {\n    this.validateApiKey(apiKey);\n    try {\n      const results = await Promise.all(\n        posts.map((post) => this.postsService.upsertPost(post)),\n      );\n      return {\n        ok: true,\n        status: 200,\n        message: `${results.length}개의 포스트를 성공적으로 처리했습니다`,\n        data: results,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('대량 포스트 처리 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Get()\n  async getAllPosts() {\n    try {\n      const posts = await this.postsService.getAllPosts();\n      return {\n        ok: true,\n        status: 200,\n        data: posts,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException(\n        '포스트 목록 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('slug/:slug')\n  async getPostBySlug(@Param('slug') slug: string) {\n    try {\n      const post = await this.postsService.getPostBySlug(slug);\n      if (!post) {\n        throw new HttpException(\n          '포스트를 찾을 수 없습니다',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) throw error;\n      console.error(error);\n      throw new HttpException(\n        '포스트 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id')\n  async getPost(@Param('id', ParseIntPipe) id: number) {\n    try {\n      const post = await this.postsService.getPost(id);\n      if (!post) {\n        throw new HttpException(\n          '포스트를 찾을 수 없습니다',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) throw error;\n      throw new HttpException(\n        '포스트 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Put('slug/:slug')\n  async updatePostBySlug(\n    @Param('slug') slug: string,\n    @Body() updatePostDto: UpdatePostDto,\n  ) {\n    try {\n      const post = await this.postsService.updatePostBySlug(\n        slug,\n        updatePostDto,\n      );\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 업데이트 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put(':id')\n  async updatePost(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updatePostDto: UpdatePostDto,\n  ) {\n    try {\n      const post = await this.postsService.updatePost(id, updatePostDto);\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 업데이트 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete('slug/:slug')\n  async deletePostBySlug(@Param('slug') slug: string) {\n    try {\n      await this.postsService.deletePostBySlug(slug);\n      return {\n        ok: true,\n        status: 200,\n        message: '포스트가 성공적으로 삭제되었습니다',\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 삭제 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete(':id')\n  async deletePost(@Param('id', ParseIntPipe) id: number) {\n    try {\n      await this.postsService.deletePost(id);\n      return {\n        ok: true,\n        status: 200,\n        message: '포스트가 성공적으로 삭제되었습니다',\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 삭제 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n"],"names":["PostsController","validateApiKey","apiKey","validApiKey","process","env","BUILD_SYNC_API_KEY","console","warn","NODE_ENV","HttpException","HttpStatus","INTERNAL_SERVER_ERROR","UNAUTHORIZED","upsertPost","createPostDto","log","post","postsService","ok","status","data","error","isPrismaError","handlePrismaError","BAD_REQUEST","bulkUpsertPosts","posts","results","Promise","all","map","message","length","getAllPosts","getPostBySlug","slug","NOT_FOUND","getPost","id","updatePostBySlug","updatePostDto","updatePost","deletePostBySlug","deletePost"],"mappings":"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"}