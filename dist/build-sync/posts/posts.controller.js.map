{"version":3,"sources":["../../../src/build-sync/posts/posts.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { handlePrismaError, isPrismaError } from 'src/util/prisma';\nimport type { CreatePostDto, UpdatePostDto } from './dto/post.dto';\nimport { PostsService } from './posts.service';\n\n@Controller('api/build-sync/posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  async upsertPost(@Body() createPostDto: CreatePostDto) {\n    try {\n      console.log('받은 데이터:', createPostDto);\n\n      const post = await this.postsService.upsertPost(createPostDto);\n\n      return {\n        ok: true,\n        status: 201,\n        data: post,\n      };\n    } catch (error) {\n      console.error('Upsert 에러 상세:', error);\n      if (isPrismaError(error)) return handlePrismaError(error);\n      throw new HttpException('포스트 처리 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put('bulk')\n  async bulkUpsertPosts(@Body() posts: CreatePostDto[]) {\n    try {\n      const results = await Promise.all(\n        posts.map((post) => this.postsService.upsertPost(post)),\n      );\n      return {\n        ok: true,\n        status: 200,\n        message: `${results.length}개의 포스트를 성공적으로 처리했습니다`,\n        data: results,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('대량 포스트 처리 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Get()\n  async getAllPosts() {\n    try {\n      const posts = await this.postsService.getAllPosts();\n      return {\n        ok: true,\n        status: 200,\n        data: posts,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException(\n        '포스트 목록 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('slug/:slug')\n  async getPostBySlug(@Param('slug') slug: string) {\n    try {\n      const post = await this.postsService.getPostBySlug(slug);\n      if (!post) {\n        throw new HttpException(\n          '포스트를 찾을 수 없습니다',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) throw error;\n      console.error(error);\n      throw new HttpException(\n        '포스트 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id')\n  async getPost(@Param('id', ParseIntPipe) id: number) {\n    try {\n      const post = await this.postsService.getPost(id);\n      if (!post) {\n        throw new HttpException(\n          '포스트를 찾을 수 없습니다',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      if (error instanceof HttpException) throw error;\n      throw new HttpException(\n        '포스트 조회 실패',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Put('slug/:slug')\n  async updatePostBySlug(\n    @Param('slug') slug: string,\n    @Body() updatePostDto: UpdatePostDto,\n  ) {\n    try {\n      const post = await this.postsService.updatePostBySlug(\n        slug,\n        updatePostDto,\n      );\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 업데이트 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put(':id')\n  async updatePost(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updatePostDto: UpdatePostDto,\n  ) {\n    try {\n      const post = await this.postsService.updatePost(id, updatePostDto);\n      return {\n        ok: true,\n        status: 200,\n        data: post,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 업데이트 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete('slug/:slug')\n  async deletePostBySlug(@Param('slug') slug: string) {\n    try {\n      await this.postsService.deletePostBySlug(slug);\n      return {\n        ok: true,\n        status: 200,\n        message: '포스트가 성공적으로 삭제되었습니다',\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 삭제 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete(':id')\n  async deletePost(@Param('id', ParseIntPipe) id: number) {\n    try {\n      await this.postsService.deletePost(id);\n      return {\n        ok: true,\n        status: 200,\n        message: '포스트가 성공적으로 삭제되었습니다',\n      };\n    } catch (error) {\n      console.error(error);\n      throw new HttpException('포스트 삭제 실패', HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n"],"names":["PostsController","upsertPost","createPostDto","console","log","post","postsService","ok","status","data","error","isPrismaError","handlePrismaError","HttpException","HttpStatus","BAD_REQUEST","bulkUpsertPosts","posts","results","Promise","all","map","message","length","getAllPosts","INTERNAL_SERVER_ERROR","getPostBySlug","slug","NOT_FOUND","getPost","id","updatePostBySlug","updatePostDto","updatePost","deletePostBySlug","deletePost"],"mappings":"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"}