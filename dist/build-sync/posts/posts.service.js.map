{"version":3,"sources":["../../../src/build-sync/posts/posts.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  PostWithRelations,\n  UpdatePostDto,\n  type PostResponse,\n} from './dto/post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prisma: PrismaService) {}\n\n  // 프론트엔드가 기대하는 응답 구조로 변환\n  private transformToPostResponse(\n    post: PostWithRelations | null,\n  ): PostResponse | null {\n    if (!post) return null;\n\n    return {\n      id: post.id,\n      slug: post.slug,\n      title: post.title,\n      description: post.description || '',\n      thumbnail: post.thumbnail || null,\n      hash_code: post.hash_code,\n      category: post.categories?.category_name || '',\n      published: post.published ? post.published.toISOString() : null,\n      updated_at: post.updated_at\n        ? post.updated_at.toISOString()\n        : new Date().toISOString(),\n    };\n  }\n\n  async upsertPost(postDto: CreatePostDto): Promise<PostResponse | null> {\n    const { metadata, hash_code } = postDto;\n    const { slug, published, tags, category, title, description, thumbnail } =\n      metadata;\n    const inputTags = tags ?? [];\n\n    const publishedDate = published ? new Date(published) : null;\n    const postDescription = description ?? '';\n\n    return await this.prisma.$transaction(async (tx) => {\n      let categoryId: number | null = null;\n\n      // 카테고리 처리 (있는 경우)\n      if (category) {\n        const categoryRecord = await tx.categories.upsert({\n          where: { category_name: category },\n          update: {},\n          create: { category_name: category },\n        });\n        categoryId = categoryRecord.id;\n      }\n\n      // posts 테이블에 upsert\n      const post = await tx.posts.upsert({\n        where: { slug },\n        update: {\n          published: publishedDate,\n          hash_code,\n          title,\n          description: postDescription,\n          thumbnail,\n          category_id: categoryId,\n        },\n        create: {\n          slug,\n          published: publishedDate,\n          hash_code,\n          title,\n          description: postDescription,\n          category_id: categoryId,\n        },\n      });\n\n      // 태그 처리가 필요한 경우에만 실행\n      if (inputTags.length > 0) {\n        // 태그들을 한 번에 upsert (없으면 생성, 있으면 그대로)\n        await tx.tags.createMany({\n          data: inputTags.map((tagName) => ({ tag_name: tagName })),\n          skipDuplicates: true, // 중복 무시\n        });\n\n        // 기존 포스트-태그 관계 삭제\n        await tx.post_tags.deleteMany({\n          where: { post_id: post.id },\n        });\n\n        // 새로운 포스트-태그 관계 생성\n        const tagRecords = await tx.tags.findMany({\n          where: { tag_name: { in: inputTags } },\n          select: { id: true },\n        });\n\n        await tx.post_tags.createMany({\n          data: tagRecords.map((tag) => ({\n            post_id: post.id,\n            tag_id: tag.id,\n          })),\n        });\n      } else {\n        // 태그가 없는 경우 기존 관계만 삭제\n        await tx.post_tags.deleteMany({\n          where: { post_id: post.id },\n        });\n      }\n\n      // 생성/업데이트된 포스트를 카테고리 정보와 함께 조회\n      const fullPost = await tx.posts.findUnique({\n        where: { id: post.id },\n        include: {\n          categories: true,\n          post_tags: {\n            include: {\n              tags: true,\n            },\n          },\n        },\n      });\n\n      return this.transformToPostResponse(fullPost);\n    });\n  }\n\n  async getAllPosts() {\n    return await this.prisma.posts.findMany({\n      include: {\n        categories: true,\n        post_tags: {\n          include: {\n            tags: true,\n          },\n        },\n      },\n      orderBy: { updated_at: 'desc' },\n    });\n  }\n\n  async getPost(id: number) {\n    return await this.prisma.posts.findUnique({\n      where: { id },\n      include: {\n        categories: true,\n        post_tags: {\n          include: {\n            tags: true,\n          },\n        },\n      },\n    });\n  }\n\n  async getPostBySlug(slug: string) {\n    return await this.prisma.posts.findUnique({\n      where: { slug },\n      include: {\n        categories: true,\n        post_tags: {\n          include: {\n            tags: true,\n          },\n        },\n      },\n    });\n  }\n\n  async updatePost(id: number, updatePostDto: UpdatePostDto) {\n    if (!updatePostDto.metadata) {\n      throw new Error('metadata is required');\n    }\n\n    const { metadata, hash_code } = updatePostDto;\n    const { published, tags, category, title, description } = metadata;\n    const inputTags = tags ?? [];\n\n    return await this.prisma.$transaction(async (tx) => {\n      // undefined 필드는 제외하고 업데이트\n      const updateData: Record<string, unknown> = {};\n      if (published !== undefined) updateData.published = published;\n      if (hash_code !== undefined) updateData.hash_code = hash_code;\n      if (title !== undefined) updateData.title = title;\n      if (description !== undefined) updateData.description = description ?? '';\n\n      // 카테고리 처리 (category가 정의된 경우에만)\n      if (category !== undefined) {\n        if (category) {\n          const categoryRecord = await tx.categories.upsert({\n            where: { category_name: category },\n            update: {},\n            create: { category_name: category },\n          });\n          updateData.category_id = categoryRecord.id;\n        } else {\n          updateData.category_id = null;\n        }\n      }\n\n      const post = await tx.posts.update({\n        where: { id },\n        data: updateData,\n      });\n\n      // 태그 업데이트는 tags가 정의된 경우에만\n      if (tags !== undefined) {\n        if (inputTags.length > 0) {\n          await tx.tags.createMany({\n            data: inputTags.map((tagName) => ({ tag_name: tagName })),\n            skipDuplicates: true,\n          });\n\n          await tx.post_tags.deleteMany({\n            where: { post_id: post.id },\n          });\n\n          const tagRecords = await tx.tags.findMany({\n            where: { tag_name: { in: inputTags } },\n            select: { id: true },\n          });\n\n          await tx.post_tags.createMany({\n            data: tagRecords.map((tag) => ({\n              post_id: post.id,\n              tag_id: tag.id,\n            })),\n          });\n        } else {\n          await tx.post_tags.deleteMany({\n            where: { post_id: post.id },\n          });\n        }\n      }\n\n      return post;\n    });\n  }\n\n  async updatePostBySlug(slug: string, updatePostDto: UpdatePostDto) {\n    const post = await this.getPostBySlug(slug);\n    if (!post) {\n      throw new Error('Post not found');\n    }\n    return await this.updatePost(post.id, updatePostDto);\n  }\n\n  async deletePost(id: number) {\n    return await this.prisma.posts.delete({\n      where: { id },\n    });\n  }\n\n  async deletePostBySlug(slug: string) {\n    return await this.prisma.posts.delete({\n      where: { slug },\n    });\n  }\n}\n"],"names":["PostsService","transformToPostResponse","post","id","slug","title","description","thumbnail","hash_code","category","categories","category_name","published","toISOString","updated_at","Date","upsertPost","postDto","metadata","tags","inputTags","publishedDate","postDescription","prisma","$transaction","tx","categoryId","categoryRecord","upsert","where","update","create","posts","category_id","length","createMany","data","map","tagName","tag_name","skipDuplicates","post_tags","deleteMany","post_id","tagRecords","findMany","in","select","tag","tag_id","fullPost","findUnique","include","getAllPosts","orderBy","getPost","getPostBySlug","updatePost","updatePostDto","Error","updateData","undefined","updatePostBySlug","deletePost","delete","deletePostBySlug"],"mappings":"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"}